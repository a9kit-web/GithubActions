name: AWS EC2 Instance Management with Existing Elastic IP, Docker, Nginx, Certbot, and Django WebApp

on:
  push:
    branches:
      - main

jobs:
  create-and-run-ec2:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up AWS CLI
      uses: aws-actions/configure-aws-credentials@v2
      with:
        aws-access-key-id: ${{ secrets.AWS_KEY }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET }}
        aws-region: ap-south-1

    - name: Launch EC2 instance (Ubuntu)
      id: launch_instance
      run: |
        INSTANCE_ID=$(aws ec2 run-instances --image-id ami-0522ab6e1ddcc7055 --instance-type t2.micro --key-name mykeypair --security-group-ids sg-0ceb88b1df74bd117 --subnet-id subnet-03f98bd07a433d75c --associate-public-ip-address --query 'Instances[0].InstanceId' --output text)
        echo "Instance ID: $INSTANCE_ID"
        echo "::set-output name=instance_id::$INSTANCE_ID"

    - name: Wait for EC2 to be running
      run: |
        aws ec2 wait instance-running --instance-ids ${{ steps.launch_instance.outputs.instance_id }}

    - name: Associate existing Elastic IP with EC2 instance
      run: |
        aws ec2 associate-address \
          --instance-id ${{ steps.launch_instance.outputs.instance_id }} \
          --allocation-id eipalloc-055cb23cb0ca36ed9

    - name: Get Public IP of EC2 with Elastic IP
      id: get_ip
      run: |
        INSTANCE_IP=$(aws ec2 describe-addresses \
          --allocation-ids eipalloc-055cb23cb0ca36ed9 \
          --query 'Addresses[0].PublicIp' \
          --output text)
        
        echo "EC2 Elastic IP: $INSTANCE_IP"
        echo "::set-output name=instance_ip::$INSTANCE_IP"

    - name: Wait for SSH service on EC2
      run: |
        until nc -z -v -w30 ${{ steps.get_ip.outputs.instance_ip }} 22
        do
          echo "Waiting for SSH to be available..."
          sleep 5
        done
        echo "SSH is available!"

    # - name: Setup SSH Key and Run Commands on EC2
    #   run: |
    #       echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
    #       chmod 600 ~/.ssh/id_rsa
    - name: Setup SSH
      uses: webfactory/ssh-agent@v0.5.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    - name: Run commands on EC2 to install Docker, Nginx, Certbot, and set up Django WebApp
      run: |
        ssh -o StrictHostKeyChecking=no -i ~/.ssh/id_rsa ubuntu@${{ steps.get_ip.outputs.instance_ip }} << 'EOF'
          echo "Installing Docker on Ubuntu"
          sudo apt-get update -y
          sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
          sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
          sudo apt-get update -y
          sudo apt-get install -y docker-ce
          sudo systemctl start docker
          sudo usermod -aG docker ubuntu
          
          echo "Docker installed"

          echo "Installing Nginx on Ubuntu"
          sudo apt-get install -y nginx
          sudo systemctl start nginx
          sudo systemctl enable nginx
          
          echo "Nginx installed"

          echo "Installing Certbot and Certbot Nginx plugin"
          sudo apt-get install -y certbot python3-certbot-nginx git
          
          echo "Certbot and Nginx plugin installed"

          # Create the directory for the Django web app
          echo "Creating django-webapp directory"
          mkdir -p /home/ubuntu/django-webapp

          # Clone the Django webapp private repository using the GitHub token
          echo "Cloning the Django private repository"
          git clone https://${{ secrets.GH_TOKEN }}@github.com/a9kit-web/GithubActions.git /home/ubuntu/django-webapp
          echo "Django repository setup completed"

          echo "Setting up Nginx configuration"
          sudo cp /home/ubuntu/django-webapp/django-nginx.conf /etc/nginx/sites-available/django-webapp
          sudo ln -s /etc/nginx/sites-available/django-webapp /etc/nginx/sites-enabled/
          
          # Build Docker image and run container
          echo "Building Docker image and running container"
          cd /home/ubuntu/django-webapp
          sudo docker build -t django-webapp .
          sudo docker run -d -p 8000:8000 django-webapp

          # Run Certbot to obtain SSL certificates
          echo "Running Certbot to obtain SSL certificates"
          sudo certbot --nginx -d a9kit.ddnsfree.com --non-interactive --agree-tos --email iamankitkharwade@gmail.com

        EOF
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}

    
